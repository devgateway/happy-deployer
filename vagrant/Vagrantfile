# -*- mode: ruby -*-
# vi: set ft=ruby :

# This is a sample Vagrantfile file. Copy it into your project root.


# Load some project specific settings form YAML files.
require 'yaml'
project_settings = YAML.load_file('Vagrantsettings.yaml')
project_settings['vm_hostname'] = project_settings['vm_shortname'] + '-' + project_settings['vm_environment']
# abort(project_settings.inspect) # print variables and exit

# Vagrantfile API version.
# @see http://docs.vagrantup.com/v2/vagrantfile/machine_settings.html
API_VERSION = '2'
Vagrant.configure(API_VERSION) do |config|
  config.vm.box = project_settings['box']['name']

  # Information about the box.
  config.vm.box_url = project_settings['box']['url']
  config.vm.box_download_checksum = project_settings['box']['download_checksum']
  config.vm.box_download_checksum_type = project_settings['box']['download_checksum_type']

  # Setup the VM hostname.
  config.vm.hostname = project_settings['vm_hostname']

  ########################################
  # Setup VM access:

  # 1. Add port forwarding
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # 2. Add a new virtual network inteface card with a fixed IP.
  config.vm.network :private_network, ip: project_settings['vm_hostonlyip']

  # Settings for the vagrant-hostsupdater plugin.
  # @see https://github.com/cogitatio/vagrant-hostsupdater
  config.hostsupdater.aliases = []
  for vhost in project_settings['vhosts']
    config.hostsupdater.aliases = config.hostsupdater.aliases + [vhost['domain']]
    config.hostsupdater.aliases = config.hostsupdater.aliases + vhost['aliases']
  end
  # config.hostsupdater.remove_on_suspend = true

  # For MacOS:
  # @see https://github.com/BerlinVagrant/vagrant-dns
  # 3. Setup triggers or hosts-shell.
  # @see https://github.com/emyl/vagrant-triggers
  # @see https://github.com/phinze/vagrant-host-shell

  ########################################

  # Mount all the project document root folders into the gues OS.
  for vhost in project_settings['vhosts']
    config.vm.synced_folder vhost['source'], vhost['docroot']
  end

  config.vm.provider :virtualbox do |v|
    # v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    v.customize ["modifyvm", :id, "--memory", 1024]
  end

  if (project_settings['puppet_force_reinstall'] == 1)
    # Remove installed puppet modules.
    if (project_settings['puppet_development'] == 0)
      config.vm.provision "shell",
        path: 'https://raw.githubusercontent.com/devgateway/happy-deployer/v' + project_settings['puppet_module_version'] + '/shell/remove-modules.sh'
    elsif (project_settings['puppet_development'] == 1)
      config.vm.provision "shell",
        path: project_settings['happy_deployer_path'] + '/shell/remove-modules.sh'
    end
  end

  # Prepare the box using a shell script.
  if (project_settings['puppet_development'] == 0)
    config.vm.provision "shell",
      path: 'https://raw.githubusercontent.com/devgateway/happy-deployer/v' + project_settings['puppet_module_version'] + '/shell/setup-hiera.sh'
  elsif (project_settings['puppet_development'] == 1)
    config.vm.provision "shell",
      path: project_settings['happy_deployer_path'] + '/shell/setup-hiera.sh'
  end

  # Install the happydev puppet module and dependencies if not already installed.
  if (project_settings['puppet_development'] == 0)
    test_commands = "test -d /etc/puppet/modules/happydev"
    action_commands = "puppet module install " + project_settings['puppet_module_name'] + " --version " + project_settings['puppet_module_version']
    config.vm.provision "shell",
      inline: "(#{test_commands}) || (#{action_commands})"

    # Fix issue for example42-php module in redhat based systems. Ignore if patch has already been applied.
    install_command = "yum install --tolerant --assumeyes patch"
    patch_command = "patch --forward --reject-file=- --input=/etc/puppet/modules/happydev/20140513--example42-php--redhat-ini.patch /etc/puppet/modules/php/manifests/ini.pp"
    config.vm.provision "shell",
      inline: "(#{install_command}) && (#{patch_command} || true)"
  end

  if (project_settings['puppet_development'] == 0 && project_settings['puppet_manifest_file_contents'])
    # Create a custom puppet manifest file.
    config.vm.provision "shell",
      inline: 'mkdir -p /etc/puppet/manifests && echo "' + project_settings['puppet_manifest_file_contents'] + '" > /etc/puppet/manifests/site.pp'
  end

  config.vm.provision 'puppet' do |puppet|
    if (project_settings['puppet_development'] == 0)
      # 1. Default Puppet settings:
      puppet.options = project_settings['puppet_options']

      puppet.manifests_path = ['vm', '/etc/puppet/manifests']
      puppet.manifest_file = 'site.pp'
    elsif (project_settings['puppet_development'] == 1)
      # 2. Development Puppet settings:
      puppet.options = project_settings['puppet_options_dev']

      puppet.manifests_path = project_settings['happy_deployer_path'] + '/puppet/manifests'
      puppet.manifest_file = project_settings['puppet_alternative_manifest_file']

      puppet.module_path = project_settings['happy_deployer_path'] + '/puppet/modules'
    end

    # Variables passed to puppet files.
    puppet.facter = {
      'fqdn' => project_settings['vhosts'].first['domain'],
      'environment' => project_settings['vm_environment'],
    }
  end
end
