# -*- mode: ruby -*-
# vi: set ft=ruby :

# REQUIREMENTS:
# @see https://github.com/cogitatio/vagrant-hostsupdater
# @see https://github.com/dotless-de/vagrant-vbguest

# Load some project specific settings form YAML files.
require 'fileutils'
require 'yaml'
if File.exists? __dir__ + '/Vagrantsettings.local.yaml'
  project_settings_file = __dir__ + '/Vagrantsettings.local.yaml'
elsif File.exists? __dir__ + '/Vagrantsettings.yaml'
  project_settings_file = __dir__ + '/Vagrantsettings.yaml'
else
  raise 'Can not find the Vagrantsettings.yaml file.'
end
project_settings = YAML.load_file(project_settings_file)

# project_settings['vm_hostname'] = project_settings['vm_shortname'] + '_' + project_settings['vm_environment']
# abort(project_settings.inspect) # print variables and exit

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# sets the configuration version.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Configure the Main VM.
  config.vm.define :main do |main_config|
    main_config.vm.box = project_settings['box']['name']

    # Information about the box.
    main_config.vm.box_url = project_settings['box']['url']
    main_config.vm.box_download_checksum = project_settings['box']['download_checksum']
    main_config.vm.box_download_checksum_type = project_settings['box']['download_checksum_type']

    # Setup the VM hostname.
    main_config.vm.hostname = project_settings['vm_shortname']

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # main_config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # main_config.vm.network "forwarded_port", guest: 80, host: 8080

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # main_config.vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # main_config.vm.network "public_network"

    ########################################
    # Setup VM access:

    # 1. Add port forwarding
    # main_config.vm.network :forwarded_port, guest: 80, host: 8080

    # 2. Add a new virtual network interface card with a fixed IP.
    main_config.vm.network :private_network, ip: project_settings['vm_hostonlyip']

    # Settings for the vagrant-hostsupdater plugin.
    # @see https://github.com/cogitatio/vagrant-hostsupdater
    main_config.hostsupdater.aliases = []
    for vhost in project_settings['vhosts']
      main_config.hostsupdater.aliases = main_config.hostsupdater.aliases + [vhost['domain']]
      if vhost.has_key? 'aliases'
        main_config.hostsupdater.aliases = main_config.hostsupdater.aliases + vhost['aliases']
      end
    end
    # Cleanup /etc/hosts when shutting down the VM.
    main_config.hostsupdater.remove_on_suspend = true

    ########################################

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # main_config.vm.synced_folder "../data", "/vagrant_data"

    # Mount all the project document root folders into the guest OS.
    for vhost in project_settings['vhosts']
      if vhost.has_key? 'source'
        main_config.vm.synced_folder vhost['source'], vhost['docroot']
      end
    end

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # main_config.vm.provider :virtualbox do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = '1024'
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.

    main_config.vm.provider :virtualbox do |vb|
      # Use the host's resolver mechanisms to handle DNS requests.
      vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']

      # Set the amount of RAM, in MB, allocated to the virtual machine.
      vb.customize ['modifyvm', :id, '--memory', 2048]

      # Set the number of virtual CPUs allocated to the virtual machine.
      vb.customize ['modifyvm', :id, '--cpus', 2]
    end

    # Settings for the vagrant-vbguest plugin.
    # @see https://github.com/dotless-de/vagrant-vbguest
    main_config.vbguest.auto_update = true
    # main_config.vbguest.iso_path = "#{ENV['HOME']}/Downloads/VBoxGuestAdditions.iso"
    # main_config.vbguest.no_remote = false

    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # main_config.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end

    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # main_config.vm.provision "shell", inline: <<-SHELL
    #   sudo apt-get update
    #   sudo apt-get install -y apache2
    # SHELL
  end
end
